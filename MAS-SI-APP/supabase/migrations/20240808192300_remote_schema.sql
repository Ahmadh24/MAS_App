
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

COMMENT ON SCHEMA "public" IS 'standard public schema';

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

CREATE OR REPLACE FUNCTION "public"."handle_new_user"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$
begin
  insert into public.profiles (id, full_name, avatar_url)
  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');
  return new;
end;
$$;

ALTER FUNCTION "public"."handle_new_user"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."added_notifications" (
    "id" bigint NOT NULL,
    "user_id" "uuid" NOT NULL,
    "event_id" "uuid" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL
);

ALTER TABLE "public"."added_notifications" OWNER TO "postgres";

COMMENT ON TABLE "public"."added_notifications" IS 'User added events that User wants notifications for';

ALTER TABLE "public"."added_notifications" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."added_notifications_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."added_notifications_programs" (
    "id" bigint NOT NULL,
    "program_id" "uuid" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "user_id" "uuid" NOT NULL
);

ALTER TABLE "public"."added_notifications_programs" OWNER TO "postgres";

ALTER TABLE "public"."added_notifications_programs" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."added_notifications_programs_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."added_programs" (
    "user_id" "uuid" NOT NULL,
    "program_id" "uuid" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"()
);

ALTER TABLE "public"."added_programs" OWNER TO "postgres";

COMMENT ON TABLE "public"."added_programs" IS 'A table of user who added programs to their my library';

CREATE TABLE IF NOT EXISTS "public"."events" (
    "id" bigint NOT NULL,
    "event_id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "event_name" "text",
    "event_speaker" "text",
    "event_desc" "text",
    "has_lecture" boolean DEFAULT false,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "event_img" "text" DEFAULT ''::"text",
    "event_start_date" timestamp with time zone DEFAULT "now"(),
    "is_paid" boolean DEFAULT false,
    "is_kids" boolean DEFAULT false,
    "event_price" double precision DEFAULT '0'::double precision,
    "is_fourteen_plus" boolean DEFAULT false,
    "is_education" boolean DEFAULT false
);

ALTER TABLE "public"."events" OWNER TO "postgres";

ALTER TABLE "public"."events" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."events_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."events_lectures" (
    "id" bigint NOT NULL,
    "event_lecture_id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "event_id" "uuid",
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "event_lecture_name" "text",
    "event_lecture_desc" "text",
    "event_lecture_link" "text",
    "event_lecture_img" "text",
    "event_lecture_speaker" "text",
    "event_lecture_date" "text"
);

ALTER TABLE "public"."events_lectures" OWNER TO "postgres";

ALTER TABLE "public"."events_lectures" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."events_lectures_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."liked_event_lectures" (
    "id" bigint NOT NULL,
    "user_id" "uuid",
    "event_lecture_id" "uuid" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL
);

ALTER TABLE "public"."liked_event_lectures" OWNER TO "postgres";

ALTER TABLE "public"."liked_event_lectures" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."liked_event_lectures_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."liked_lectures" (
    "user_id" "uuid" NOT NULL,
    "lecture_id" "uuid" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL
);

ALTER TABLE "public"."liked_lectures" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."profiles" (
    "id" "uuid" NOT NULL,
    "updated_at" timestamp with time zone,
    "username" "text",
    "full_name" "text",
    "avatar_url" "text",
    "website" "text",
    CONSTRAINT "username_length" CHECK (("char_length"("username") >= 3))
);

ALTER TABLE "public"."profiles" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."program_lectures" (
    "id" bigint NOT NULL,
    "lecture_name" "text",
    "lecture_speaker" "text",
    "lecture_link" "text",
    "lecture_ai" "text",
    "lecture_date" "text",
    "lecture_time" "text",
    "lecture_program" "uuid",
    "lecture_id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "lecture_img" "text"
);

ALTER TABLE "public"."program_lectures" OWNER TO "postgres";

COMMENT ON TABLE "public"."program_lectures" IS 'Lectures for weekly or recurring programs';

ALTER TABLE "public"."program_lectures" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."program_lectures_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."programs" (
    "id" bigint NOT NULL,
    "program_id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "program_name" "text",
    "program_img" "text" DEFAULT ''::"text" NOT NULL,
    "program_desc" "text",
    "program_speaker" "text",
    "has_lectures" boolean DEFAULT false NOT NULL,
    "program_start_date" timestamp with time zone DEFAULT "now"(),
    "program_end_date" timestamp with time zone DEFAULT "now"(),
    "program_is_paid" boolean DEFAULT false,
    "program_price" double precision DEFAULT '0'::double precision,
    "is_kids" boolean DEFAULT false,
    "is_fourteen_plus" boolean DEFAULT false,
    "is_education" boolean DEFAULT false
);

ALTER TABLE "public"."programs" OWNER TO "postgres";

COMMENT ON TABLE "public"."programs" IS 'MAS Staten Island Weekly or recurring programs';

ALTER TABLE "public"."programs" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."programs_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."sheikh_data" (
    "sheikh_id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "sheikh_name" "text" NOT NULL,
    "sheikh_creds" "text",
    "sheikh_img" "text"
);

ALTER TABLE "public"."sheikh_data" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."user_bookmarked_ayahs" (
    "id" bigint NOT NULL,
    "user_id" "uuid" NOT NULL,
    "surah_number" bigint NOT NULL,
    "ayah_number" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL
);

ALTER TABLE "public"."user_bookmarked_ayahs" OWNER TO "postgres";

ALTER TABLE "public"."user_bookmarked_ayahs" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."user_bookmarked_ayahs_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."user_bookmarked_surahs" (
    "id" bigint NOT NULL,
    "user_id" "uuid" NOT NULL,
    "surah_number" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL
);

ALTER TABLE "public"."user_bookmarked_surahs" OWNER TO "postgres";

ALTER TABLE "public"."user_bookmarked_surahs" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."user_bookmarked_surahs_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."user_cart" (
    "id" bigint NOT NULL,
    "user_id" "uuid" NOT NULL,
    "program_id" "uuid",
    "event_id" "uuid",
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL
);

ALTER TABLE "public"."user_cart" OWNER TO "postgres";

ALTER TABLE "public"."user_cart" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."user_cart_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."user_continue_read" (
    "id" bigint NOT NULL,
    "user_id" "uuid",
    "surah_number" integer,
    "ayah_number" integer,
    "juz_number" integer,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL
);

ALTER TABLE "public"."user_continue_read" OWNER TO "postgres";

ALTER TABLE "public"."user_continue_read" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."user_continue_read_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."user_liked_ayahs" (
    "user_id" "uuid" NOT NULL,
    "id" bigint NOT NULL,
    "surah_number" bigint NOT NULL,
    "ayah_number" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL
);

ALTER TABLE "public"."user_liked_ayahs" OWNER TO "postgres";

ALTER TABLE "public"."user_liked_ayahs" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."user_liked_ayahs_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."user_liked_surahs" (
    "id" bigint NOT NULL,
    "user_id" "uuid" NOT NULL,
    "surah_number" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL
);

ALTER TABLE "public"."user_liked_surahs" OWNER TO "postgres";

ALTER TABLE "public"."user_liked_surahs" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."user_liked_surahs_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."user_playlist" (
    "user_id" "uuid" NOT NULL,
    "playlist_name" "text",
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "playlist_img" "text",
    "playlist_id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    CONSTRAINT "user_playlist_playlist_name_check" CHECK (("length"("playlist_name") > 3))
);

ALTER TABLE "public"."user_playlist" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."user_playlist_lectures" (
    "id" bigint NOT NULL,
    "user_id" "uuid" NOT NULL,
    "playlist_id" "uuid" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "program_lecture_id" "uuid",
    "event_lecture_id" "uuid"
);

ALTER TABLE "public"."user_playlist_lectures" OWNER TO "postgres";

ALTER TABLE "public"."user_playlist_lectures" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."user_playlist_lectures_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE ONLY "public"."added_notifications"
    ADD CONSTRAINT "added_notifications_pkey" PRIMARY KEY ("user_id", "event_id");

ALTER TABLE ONLY "public"."added_notifications_programs"
    ADD CONSTRAINT "added_notifications_programs_pkey" PRIMARY KEY ("program_id", "user_id");

ALTER TABLE ONLY "public"."events_lectures"
    ADD CONSTRAINT "events_lectures_pkey" PRIMARY KEY ("event_lecture_id");

ALTER TABLE ONLY "public"."events"
    ADD CONSTRAINT "events_pkey" PRIMARY KEY ("event_id");

ALTER TABLE ONLY "public"."liked_event_lectures"
    ADD CONSTRAINT "liked_event_lectures_pkey" PRIMARY KEY ("event_lecture_id");

ALTER TABLE ONLY "public"."liked_lectures"
    ADD CONSTRAINT "liked_lectures_pkey" PRIMARY KEY ("lecture_id", "user_id");

ALTER TABLE ONLY "public"."added_programs"
    ADD CONSTRAINT "liked_programs_pkey" PRIMARY KEY ("user_id", "program_id");

ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_username_key" UNIQUE ("username");

ALTER TABLE ONLY "public"."program_lectures"
    ADD CONSTRAINT "program_lectures_pkey" PRIMARY KEY ("lecture_id");

ALTER TABLE ONLY "public"."programs"
    ADD CONSTRAINT "programs_pkey" PRIMARY KEY ("program_id");

ALTER TABLE ONLY "public"."sheikh_data"
    ADD CONSTRAINT "sheikh_data_pkey" PRIMARY KEY ("sheikh_id");

ALTER TABLE ONLY "public"."user_bookmarked_ayahs"
    ADD CONSTRAINT "user_bookmarked_ayahs_pkey" PRIMARY KEY ("user_id", "surah_number", "ayah_number");

ALTER TABLE ONLY "public"."user_bookmarked_surahs"
    ADD CONSTRAINT "user_bookmarked_surahs_pkey" PRIMARY KEY ("user_id", "surah_number");

ALTER TABLE ONLY "public"."user_cart"
    ADD CONSTRAINT "user_cart_pkey" PRIMARY KEY ("id", "user_id");

ALTER TABLE ONLY "public"."user_continue_read"
    ADD CONSTRAINT "user_continue_read_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."user_liked_ayahs"
    ADD CONSTRAINT "user_liked_ayahs_pkey" PRIMARY KEY ("user_id", "surah_number", "ayah_number");

ALTER TABLE ONLY "public"."user_liked_surahs"
    ADD CONSTRAINT "user_liked_surahs_pkey" PRIMARY KEY ("user_id", "surah_number");

ALTER TABLE ONLY "public"."user_playlist_lectures"
    ADD CONSTRAINT "user_playlist_lectures_pkey" PRIMARY KEY ("id", "user_id", "playlist_id");

ALTER TABLE ONLY "public"."user_playlist"
    ADD CONSTRAINT "user_playlist_pkey" PRIMARY KEY ("user_id", "playlist_id");

ALTER TABLE ONLY "public"."user_playlist"
    ADD CONSTRAINT "user_playlist_playlist_id_key" UNIQUE ("playlist_id");

ALTER TABLE ONLY "public"."added_notifications"
    ADD CONSTRAINT "added_notifications_event_id_fkey" FOREIGN KEY ("event_id") REFERENCES "public"."events"("event_id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."added_notifications_programs"
    ADD CONSTRAINT "added_notifications_programs_program_id_fkey" FOREIGN KEY ("program_id") REFERENCES "public"."programs"("program_id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."added_notifications_programs"
    ADD CONSTRAINT "added_notifications_programs_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."added_notifications"
    ADD CONSTRAINT "added_notifications_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."events_lectures"
    ADD CONSTRAINT "events_lectures_event_id_fkey" FOREIGN KEY ("event_id") REFERENCES "public"."events"("event_id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."liked_event_lectures"
    ADD CONSTRAINT "liked_event_lectures_event_lecture_id_fkey" FOREIGN KEY ("event_lecture_id") REFERENCES "public"."events_lectures"("event_lecture_id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."liked_event_lectures"
    ADD CONSTRAINT "liked_event_lectures_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."liked_lectures"
    ADD CONSTRAINT "liked_lectures_lecture_id_fkey" FOREIGN KEY ("lecture_id") REFERENCES "public"."program_lectures"("lecture_id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."liked_lectures"
    ADD CONSTRAINT "liked_lectures_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."added_programs"
    ADD CONSTRAINT "liked_programs_program_id_fkey" FOREIGN KEY ("program_id") REFERENCES "public"."programs"("program_id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."added_programs"
    ADD CONSTRAINT "liked_programs_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_id_fkey" FOREIGN KEY ("id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."program_lectures"
    ADD CONSTRAINT "program_lectures_lecture_program_fkey" FOREIGN KEY ("lecture_program") REFERENCES "public"."programs"("program_id");

ALTER TABLE ONLY "public"."user_bookmarked_ayahs"
    ADD CONSTRAINT "user_bookmarked_ayahs_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."user_bookmarked_surahs"
    ADD CONSTRAINT "user_bookmarked_surahs_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."user_cart"
    ADD CONSTRAINT "user_cart_event_id_fkey" FOREIGN KEY ("event_id") REFERENCES "public"."events"("event_id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."user_cart"
    ADD CONSTRAINT "user_cart_program_id_fkey" FOREIGN KEY ("program_id") REFERENCES "public"."programs"("program_id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."user_cart"
    ADD CONSTRAINT "user_cart_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."user_continue_read"
    ADD CONSTRAINT "user_continue_read_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."user_liked_ayahs"
    ADD CONSTRAINT "user_liked_ayahs_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."user_liked_surahs"
    ADD CONSTRAINT "user_liked_surahs_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."user_playlist_lectures"
    ADD CONSTRAINT "user_playlist_lectures_event_lecture_id_fkey" FOREIGN KEY ("event_lecture_id") REFERENCES "public"."events_lectures"("event_lecture_id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."user_playlist_lectures"
    ADD CONSTRAINT "user_playlist_lectures_playlist_id_fkey" FOREIGN KEY ("playlist_id") REFERENCES "public"."user_playlist"("playlist_id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."user_playlist_lectures"
    ADD CONSTRAINT "user_playlist_lectures_program_lecture_id_fkey" FOREIGN KEY ("program_lecture_id") REFERENCES "public"."program_lectures"("lecture_id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."user_playlist_lectures"
    ADD CONSTRAINT "user_playlist_lectures_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."user_playlist"
    ADD CONSTRAINT "user_playlist_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;

CREATE POLICY "Enable delete for users based on user_id" ON "public"."added_notifications" FOR DELETE USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));

CREATE POLICY "Enable delete for users based on user_id" ON "public"."added_notifications_programs" FOR DELETE USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));

CREATE POLICY "Enable delete for users based on user_id" ON "public"."added_programs" FOR DELETE USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));

CREATE POLICY "Enable delete for users based on user_id" ON "public"."liked_event_lectures" FOR DELETE USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));

CREATE POLICY "Enable delete for users based on user_id" ON "public"."liked_lectures" FOR DELETE USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));

CREATE POLICY "Enable delete for users based on user_id" ON "public"."user_bookmarked_ayahs" FOR DELETE USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));

CREATE POLICY "Enable delete for users based on user_id" ON "public"."user_bookmarked_surahs" FOR DELETE USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));

CREATE POLICY "Enable delete for users based on user_id" ON "public"."user_liked_ayahs" FOR DELETE USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));

CREATE POLICY "Enable delete for users based on user_id" ON "public"."user_liked_surahs" FOR DELETE USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));

CREATE POLICY "Enable delete for users based on user_id" ON "public"."user_playlist" FOR DELETE USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));

CREATE POLICY "Enable delete for users based on user_id" ON "public"."user_playlist_lectures" FOR DELETE USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));

CREATE POLICY "Enable insert for authenticated users only" ON "public"."added_notifications" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."added_notifications_programs" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."added_programs" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."liked_event_lectures" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."liked_lectures" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."user_bookmarked_ayahs" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."user_bookmarked_surahs" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."user_liked_ayahs" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."user_liked_surahs" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."user_playlist" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."user_playlist_lectures" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable read access for all users" ON "public"."added_notifications" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."added_notifications_programs" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."added_programs" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."events" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."events_lectures" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."liked_event_lectures" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."liked_lectures" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."program_lectures" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."programs" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."sheikh_data" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."user_bookmarked_ayahs" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."user_bookmarked_surahs" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."user_liked_ayahs" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."user_liked_surahs" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."user_playlist" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."user_playlist_lectures" FOR SELECT USING (true);

CREATE POLICY "Public profiles are viewable by everyone." ON "public"."profiles" FOR SELECT USING (true);

CREATE POLICY "Users can insert their own profile." ON "public"."profiles" FOR INSERT WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "id"));

CREATE POLICY "Users can update own profile." ON "public"."profiles" FOR UPDATE USING ((( SELECT "auth"."uid"() AS "uid") = "id"));

ALTER TABLE "public"."added_notifications" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."added_notifications_programs" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."added_programs" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."events" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."events_lectures" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."liked_event_lectures" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."liked_lectures" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."profiles" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."program_lectures" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."programs" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."sheikh_data" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."user_bookmarked_ayahs" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."user_bookmarked_surahs" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."user_cart" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."user_continue_read" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."user_liked_ayahs" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."user_liked_surahs" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."user_playlist" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."user_playlist_lectures" ENABLE ROW LEVEL SECURITY;

ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";

ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."added_notifications";

ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."added_notifications_programs";

ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."added_programs";

ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."events";

ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."events_lectures";

ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."liked_event_lectures";

ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."liked_lectures";

ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."program_lectures";

ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."programs";

ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."user_bookmarked_ayahs";

ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."user_bookmarked_surahs";

ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."user_cart";

ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."user_continue_read";

ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."user_liked_ayahs";

ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."user_liked_surahs";

ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."user_playlist";

ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."user_playlist_lectures";

GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "anon";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "service_role";

GRANT ALL ON TABLE "public"."added_notifications" TO "anon";
GRANT ALL ON TABLE "public"."added_notifications" TO "authenticated";
GRANT ALL ON TABLE "public"."added_notifications" TO "service_role";

GRANT ALL ON SEQUENCE "public"."added_notifications_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."added_notifications_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."added_notifications_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."added_notifications_programs" TO "anon";
GRANT ALL ON TABLE "public"."added_notifications_programs" TO "authenticated";
GRANT ALL ON TABLE "public"."added_notifications_programs" TO "service_role";

GRANT ALL ON SEQUENCE "public"."added_notifications_programs_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."added_notifications_programs_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."added_notifications_programs_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."added_programs" TO "anon";
GRANT ALL ON TABLE "public"."added_programs" TO "authenticated";
GRANT ALL ON TABLE "public"."added_programs" TO "service_role";

GRANT ALL ON TABLE "public"."events" TO "anon";
GRANT ALL ON TABLE "public"."events" TO "authenticated";
GRANT ALL ON TABLE "public"."events" TO "service_role";

GRANT ALL ON SEQUENCE "public"."events_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."events_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."events_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."events_lectures" TO "anon";
GRANT ALL ON TABLE "public"."events_lectures" TO "authenticated";
GRANT ALL ON TABLE "public"."events_lectures" TO "service_role";

GRANT ALL ON SEQUENCE "public"."events_lectures_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."events_lectures_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."events_lectures_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."liked_event_lectures" TO "anon";
GRANT ALL ON TABLE "public"."liked_event_lectures" TO "authenticated";
GRANT ALL ON TABLE "public"."liked_event_lectures" TO "service_role";

GRANT ALL ON SEQUENCE "public"."liked_event_lectures_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."liked_event_lectures_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."liked_event_lectures_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."liked_lectures" TO "anon";
GRANT ALL ON TABLE "public"."liked_lectures" TO "authenticated";
GRANT ALL ON TABLE "public"."liked_lectures" TO "service_role";

GRANT ALL ON TABLE "public"."profiles" TO "anon";
GRANT ALL ON TABLE "public"."profiles" TO "authenticated";
GRANT ALL ON TABLE "public"."profiles" TO "service_role";

GRANT ALL ON TABLE "public"."program_lectures" TO "anon";
GRANT ALL ON TABLE "public"."program_lectures" TO "authenticated";
GRANT ALL ON TABLE "public"."program_lectures" TO "service_role";

GRANT ALL ON SEQUENCE "public"."program_lectures_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."program_lectures_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."program_lectures_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."programs" TO "anon";
GRANT ALL ON TABLE "public"."programs" TO "authenticated";
GRANT ALL ON TABLE "public"."programs" TO "service_role";

GRANT ALL ON SEQUENCE "public"."programs_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."programs_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."programs_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."sheikh_data" TO "anon";
GRANT ALL ON TABLE "public"."sheikh_data" TO "authenticated";
GRANT ALL ON TABLE "public"."sheikh_data" TO "service_role";

GRANT ALL ON TABLE "public"."user_bookmarked_ayahs" TO "anon";
GRANT ALL ON TABLE "public"."user_bookmarked_ayahs" TO "authenticated";
GRANT ALL ON TABLE "public"."user_bookmarked_ayahs" TO "service_role";

GRANT ALL ON SEQUENCE "public"."user_bookmarked_ayahs_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."user_bookmarked_ayahs_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."user_bookmarked_ayahs_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."user_bookmarked_surahs" TO "anon";
GRANT ALL ON TABLE "public"."user_bookmarked_surahs" TO "authenticated";
GRANT ALL ON TABLE "public"."user_bookmarked_surahs" TO "service_role";

GRANT ALL ON SEQUENCE "public"."user_bookmarked_surahs_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."user_bookmarked_surahs_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."user_bookmarked_surahs_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."user_cart" TO "anon";
GRANT ALL ON TABLE "public"."user_cart" TO "authenticated";
GRANT ALL ON TABLE "public"."user_cart" TO "service_role";

GRANT ALL ON SEQUENCE "public"."user_cart_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."user_cart_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."user_cart_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."user_continue_read" TO "anon";
GRANT ALL ON TABLE "public"."user_continue_read" TO "authenticated";
GRANT ALL ON TABLE "public"."user_continue_read" TO "service_role";

GRANT ALL ON SEQUENCE "public"."user_continue_read_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."user_continue_read_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."user_continue_read_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."user_liked_ayahs" TO "anon";
GRANT ALL ON TABLE "public"."user_liked_ayahs" TO "authenticated";
GRANT ALL ON TABLE "public"."user_liked_ayahs" TO "service_role";

GRANT ALL ON SEQUENCE "public"."user_liked_ayahs_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."user_liked_ayahs_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."user_liked_ayahs_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."user_liked_surahs" TO "anon";
GRANT ALL ON TABLE "public"."user_liked_surahs" TO "authenticated";
GRANT ALL ON TABLE "public"."user_liked_surahs" TO "service_role";

GRANT ALL ON SEQUENCE "public"."user_liked_surahs_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."user_liked_surahs_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."user_liked_surahs_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."user_playlist" TO "anon";
GRANT ALL ON TABLE "public"."user_playlist" TO "authenticated";
GRANT ALL ON TABLE "public"."user_playlist" TO "service_role";

GRANT ALL ON TABLE "public"."user_playlist_lectures" TO "anon";
GRANT ALL ON TABLE "public"."user_playlist_lectures" TO "authenticated";
GRANT ALL ON TABLE "public"."user_playlist_lectures" TO "service_role";

GRANT ALL ON SEQUENCE "public"."user_playlist_lectures_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."user_playlist_lectures_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."user_playlist_lectures_id_seq" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
