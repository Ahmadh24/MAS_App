drop policy "Public profiles are viewable by everyone." on "public"."profiles";

drop policy "Users can insert their own profile." on "public"."profiles";

drop policy "Users can update own profile." on "public"."profiles";

alter table "public"."profiles" drop constraint "profiles_username_key";

alter table "public"."profiles" drop constraint "username_length";

alter table "public"."profiles" drop constraint "profiles_id_fkey";

drop index if exists "public"."profiles_username_key";

create table "public"."program_forms" (
    "id" bigint generated by default as identity not null,
    "program_id" uuid,
    "question_type" text,
    "question" text,
    "radio_button_prompts" text[],
    "created_at" timestamp with time zone not null default now()
);


alter table "public"."program_forms" enable row level security;

alter table "public"."profiles" drop column "avatar_url";

alter table "public"."profiles" drop column "full_name";

alter table "public"."profiles" drop column "updated_at";

alter table "public"."profiles" drop column "username";

alter table "public"."profiles" drop column "website";

alter table "public"."profiles" add column "created_at" timestamp with time zone not null default now();

alter table "public"."profiles" add column "first_name" text;

alter table "public"."profiles" add column "last_name" text;

alter table "public"."profiles" add column "profile_email" text;

alter table "public"."profiles" add column "profile_pic" text;

alter table "public"."profiles" add column "role" text default 'USER'::text;

alter table "public"."profiles" add column "stripe_id" text;

alter table "public"."user_cart" add column "product_quantity" bigint default '1'::bigint;

CREATE UNIQUE INDEX program_forms_pkey ON public.program_forms USING btree (id);

alter table "public"."program_forms" add constraint "program_forms_pkey" PRIMARY KEY using index "program_forms_pkey";

alter table "public"."program_forms" add constraint "program_forms_program_id_fkey" FOREIGN KEY (program_id) REFERENCES programs(program_id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."program_forms" validate constraint "program_forms_program_id_fkey";

alter table "public"."profiles" add constraint "profiles_id_fkey" FOREIGN KEY (id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."profiles" validate constraint "profiles_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.handle_new_user()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$begin
  insert into public.profiles (id, first_name, last_name, profile_email)
  values (new.id, new.raw_user_meta_data ->> 'first_name', new.raw_user_meta_data ->> 'last_name', new.raw_user_meta_data ->> 'profile_email');
  return new;
end;$function$
;

grant delete on table "public"."program_forms" to "anon";

grant insert on table "public"."program_forms" to "anon";

grant references on table "public"."program_forms" to "anon";

grant select on table "public"."program_forms" to "anon";

grant trigger on table "public"."program_forms" to "anon";

grant truncate on table "public"."program_forms" to "anon";

grant update on table "public"."program_forms" to "anon";

grant delete on table "public"."program_forms" to "authenticated";

grant insert on table "public"."program_forms" to "authenticated";

grant references on table "public"."program_forms" to "authenticated";

grant select on table "public"."program_forms" to "authenticated";

grant trigger on table "public"."program_forms" to "authenticated";

grant truncate on table "public"."program_forms" to "authenticated";

grant update on table "public"."program_forms" to "authenticated";

grant delete on table "public"."program_forms" to "service_role";

grant insert on table "public"."program_forms" to "service_role";

grant references on table "public"."program_forms" to "service_role";

grant select on table "public"."program_forms" to "service_role";

grant trigger on table "public"."program_forms" to "service_role";

grant truncate on table "public"."program_forms" to "service_role";

grant update on table "public"."program_forms" to "service_role";

create policy "Enable insert for authenticated users only"
on "public"."profiles"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."profiles"
as permissive
for select
to public
using (true);


create policy "Enable update for users "
on "public"."profiles"
as restrictive
for update
to authenticated
using (true)
with check (true);


create policy "Enable read access for all users"
on "public"."program_forms"
as permissive
for select
to public
using (true);


create policy "Enable delete for users based on user_id"
on "public"."user_cart"
as permissive
for delete
to public
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable insert for authenticated users only"
on "public"."user_cart"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."user_cart"
as permissive
for select
to public
using (true);


create policy "Enable update for authenticated users only"
on "public"."user_cart"
as permissive
for update
to authenticated
using ((auth.uid() = user_id))
with check ((auth.uid() = user_id));



